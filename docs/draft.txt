const full_adder = module {
    in a: sig;
    in b: sig;
    in cin: sig;

    out s = a ^ b ^ cin; // or ^.{a, b, cin};
    out cout = a & b | cin & a ^ b;
};

const sequential_logic = module {
    // val for internal signals? maybe var?
    // const could be for constexprs
    const state: [3]sig = @reg(clk, rst, 1b, next_state);
    val next_state = switch (state) {
        0b000 => 0b001,
        0b001 => 0b010,
        0b010 => 0b000,
        else => 0b000,
    };
};

// Show off `onehot`, `active_low`, `active_high`
const val_qualifiers = module {
    val oh: [3]onehot sig = undefined;
    const al: [3]active_low sig = 0b1;
    const ah: [3]active_high sig = 0b1;

    // active low will consider 0 to be truthy, this fails the first if
    oh = if (al)
        0b101 // compile error, assigning non-onehot signal to onehot signal
    else if (ah)
        0b001
    else
        0b100;
};

const comb_mod = module {
    in a: sig;
    in b: sig;
    const reg = @reg(clk, rst, next_reg);
    val next_reg;

    const update_next_reg = comb {
        next_reg = ~a;
    };

    comb {
        if (b) update_next_reg();
    }
};

const output = struct {
    a: sig,
    b: [3]sig,
};

const pipeline = fn(width: comptime_int) interface {
    return interface {
        a: [width]sig,
        b: [width]sig,
        start: [width]sig,
        halt: sig,

    };
}

// NEW IDEA: everything is a "struct"
const adder = interface {
    a: [3]sig,
    b: [3]sig,
    pub s: [3]sig,
    pub c: sig,

    pub const always = comb {
        s = @foreach(a ^ b ^ cin);
        c = @foreach(a & b | cin & a ^ b);
    };
};

// or maybe everything is a function that returns a struct
const adder = fn (a: [3]sig, b: [3]sig) struct {
    pub s: [3]sig,
    pub c: [3]sig,

    comb {
        s = @foreach(a ^ b ^ cin);
        c = @foreach(a & b | cin & a ^ b);
    }
};

// everything is a reference
const In = struct {
    a: [3]sig,
    b: [3]sig,
    cin: sig,
};
const Out = struct {
    s: [3]sig,
    c: sig,
}
// What would returning from a function mean
// should `mut` be `var`
const adder = fn (in: &In, out: &var Out) void {
    out.s = @foreach(a ^ b ^ cin);
    out.c = @foreach (a & b | cin & a ^ b);
}
// Maybe "module" would be defined as being able to cast to
// `fn (comptime In: type, comptime Out: type, in: &In, out: &var Out) void`

const In = struct {
    a: sig,
    b: sig,
    cin: sig,
};
const Out = struct {
    s: sig,
    c: sig,
};
const adder = module(in: &In, out: &var Out) {
    // ^ defined for busses
    out.s = in.a ^ in.b ^ in.cin;
    out.c = (in.a and in.b) or (in.cin and (in.a ^ in.b))
};

// Example of interface translation
const GenericBusIf = struct {
    addr: u32,
    wdata: u32,
    rdata: u32,
    ren: bool,
    wen: bool,
    busy: bool,
    byte_en: [4]u1,

    pub const GenericBus = struct {
        addr: &u32,
        wdata: &u32,
        ren: &bool,
        wen: &bool,
        byte_en: &[4]u1,

        rdata: &var u32,
        busy: &var bool,
    };

    pub const Cpu = struct {
        rdata: &u32,
        busy: &bool,

        addr: &var u32,
        wdata: &var u32,
        ren: &var bool,
        wen: &var bool,
        byte_en: &var [4]u1,
    };

    pub const toGenericBus = fn (self: &var GenericBusIf) GenericBus {
        return .{
            .addr = &self.addr,
            .wdata = &self.wdata,
            .rdata = &self.rdata,
            .ren = &self.ren,
            .wen = &self.wen,
            .busy = &self.busy,
            .byte_en = &self.byte_en,
        };
    }

    pub const toCpu = fn (self: &var GenericBusIf) Cpu {
        return .{
            .addr = &self.addr,
            .wdata = &self.wdata,
            .rdata = &self.rdata,
            .ren = &self.ren,
            .wen = &self.wen,
            .busy = &self.busy,
            .byte_en = &self.byte_en,
        };
    }
};

// Drafts for UTir
// src
const In = struct {
    a: bool,
    b: bool,
};
const Out = struct {
    c: bool,
};
const Mod = module(in: &In, out: &var Out) {
    out.c = in.a & in.b;
};
// corresponding utir
%0 = struct({
    %1 = struct({
        a: Ref.bool_type
        b: Ref.bool_type
    })
    %2 = struct({
        c: Ref.bool_type
    })
    %3 = module({
        %4 = param(ref, %1)
        %5 = param(var_ref, %2)
    }, {
        %6 = field_read(%4, "a")
        %7 = field_read(%4, "b")
        %8 = bit_and(%6, %7)
        %9 = field_ptr(%5, "c")
        %10 = field_write(%10, %8)
    })
})
