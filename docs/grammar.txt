L_BRACE = "{"
R_BRACE = "}"
L_PAREN = "("
R_PAREN = ")"
COMMA = ","
COLON = ":"
SEMICOLON = ";"
EQUAL = "="

keywords = "module" | "struct" | "enum" | "union" | "fn" | "var" | "const" | "sig"

COMPARISON_OPERATOR = "==" | "!=" | "<" | ">" | "<=" | ">=

CONTAINER_DECL_TYPE = STRUCT / ENUM / UNION

IDENT = [a-zA-z_][a-zA-z0-9_]*

skip = (LWSP / comment)*
comment = "//".*\n$

// This stuff is outdated
/*
module = "module" L_BRACE module_body R_BRACE
module_body = TODO
nonsys_block = "nonsys" L_BRACE nonsys_body R_BRACE
nonsys_body = TODO

fn = fn_attr* "fn" IDENT L_PAREN arg_list R_PAREN type L_BRACE R_BRACE
fn_attr = "nonsys" / TODO
arg_list = IDENT COLON type COMMA skip
type = TODO

struct = "struct" L_BRACE container_body R_BRACE SEMICOLON
union = "union" L_BRACE container_body R_BRACE SEMICOLON
container_body = IDENT: type COMMA

enum = "enum" L_BRACE enum_body R_BRACE SEMICOLON
enum_body = IDENT COMMA skip
*/

// Top level stuff
root = container_members*

container_members = var_decl_statement | container_field

var_decl_expr = pub? ("const" / "var") IDENT (COLON type_expr)? EQUAL expr

container_field = IDENT COLON type_expr (EQUAL expr) COMMA

// TODO: operator precendences
expr = bool_or_expr

bool_or_expr = bool_and_expr (KEYWORD_OR bool_and_expr)*

bool_and_expr = comparison_expr (KEYWORD_AND comparison_expr)*

comparison_expr = bitwise_expr (COMPARISON_OPERATOR bitwise_expr)*

bitwise_expr = sum_expr (BITWISE_OPERATOR sum_expr)*

sum_expr = product_expr (SUM_OPERATOR product_expr)*

product_expr = prefix_expr (SUM_OPERATOR prefix_operator)*

prefix_expr = PREFIX_OPERATOR* primary_expr

// TODO
primary_expr = type_expr (PERIOD identifier)?

// TODO
type_expr = container_decl | process_decl | identifier | reference_expr

reference_expr = op_and keyword_var? type_expr

container_decl = CONTAINER_DECL_TYPE LBRACE container_members RBRACE

process_decl = fn_decl | module_decl

fn_decl = TODO

module_decl = keyword_module LPAREN module_args RPAREN LBRACE module_statements RBRACE

var_decl_statement = var_decl SEMICOLON
