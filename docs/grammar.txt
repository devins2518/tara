L_BRACE = "{"
R_BRACE = "}"
L_PAREN = "("
R_PAREN = ")"
COMMA = ","
COLON = ":"
SEMICOLON = ";"
EQUAL = "="

keywords = "module" | "struct" | "enum" | "union" | "fn" | "var" | "const" | "sig"

IDENT = [a-zA-z_][a-zA-z0-9_]*

skip = (LWSP / comment)*
comment = "//".*\n$

module = "module" L_BRACE module_body R_BRACE
module_body = TODO
nonsys_block = "nonsys" L_BRACE nonsys_body R_BRACE
nonsys_body = TODO

fn = fn_attr* "fn" IDENT L_PAREN arg_list R_PAREN type L_BRACE R_BRACE
fn_attr = "nonsys" / TODO
arg_list = IDENT COLON type COMMA skip
type = TODO

struct = "struct" L_BRACE container_body R_BRACE SEMICOLON
union = "union" L_BRACE container_body R_BRACE SEMICOLON
container_body = IDENT: type COMMA

enum = "enum" L_BRACE enum_body R_BRACE SEMICOLON
enum_body = IDENT COMMA skip

// Top level stuff
root = container_members*

container_members = var_decl / field

var_decl = pub? ("const" / "var") IDENT (COLON type_expr)? EQUAL expr SEMICOLON

field = IDENT COLON type_expr (EQUAL expr) COMMA

type_expr = TODO

expr = TODO
